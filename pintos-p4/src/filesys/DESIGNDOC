       	       	     +-------------------------+
		     |		CS 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

50% Partner #1: Claudia Richoux, laudecay@uchicago.edu
50% Partner #2: Kate Hu, katehu@uchicago.edu
Expected grade: 100


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
DIRECT_CNT   // number of direct blocks
INDIRECT_CNT   // number of indirect blocks
DBL_INDIRECT_CNT  // number of doubly indirect blocks
// total number of sectors within the inode structure
#define SECTOR_CNT (DIRECT_CNT + INDIRECT_CNT + DBL_INDIRECT_CNT)
// number of entries per sector
#define PTRS_PER_SECTOR ((off_t) (BLOCK_SECTOR_SIZE / sizeof (block_sector_t)))
// max file size the inode can contain
#define INODE_SPAN ((DIRECT_CNT                                              \
                     + PTRS_PER_SECTOR * INDIRECT_CNT                        \
                     + PTRS_PER_SECTOR * PTRS_PER_SECTOR * DBL_INDIRECT_CNT) \
                    * BLOCK_SECTOR_SIZE)
// whether the inode represents a file or directory
enum inode_type
{
	FILE,         /* Ordinary file. */
	DIR           /* Directory. */
};

struct inode 
{
	struct lock deny_write_lock; // control access to deny_write_cnt
	struct condition no_writers_cond; // indicates whether the inode has writers
	int deny_write_cnt;                 /* 0: writes ok, >0: deny writes. */
	int writer_cnt;  // number of writers
};

static struct lock open_inodes_lock; // control access to the open inodes list

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.
(123 + 1 * (1/2kb / 4 bytes) + 1 * (1/2kb / 4 bytes)^2) = 16635
This is the number of pointers in the inode.
Each pointer points to a block, each block is 1/2 kb, so the max
size is 16635 * 1/2kb = 8317.5kb

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.
We use a filesys lock so that only one process at a time can 
access the file write function to extend file.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.
We only update the inode's length field after all the writes have
been completed, so A will not see any data if it reads while B 
is writing. If it reads after B has finished, it can see the
entire extension.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.
We make sure that locks are only used to protect the necessary
critical section. Also we didn't use condition variable to coordinate
readers and writers so they don't need to wait for each other, and
they are treated as the same when trying to acquire a lock.


---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?
Yes, our choice is arbitrary since we just followed the inode structure
provided in the guide. But it would be a good design if the most common
file size can fit in the direct blocks. That would make read/write faster
since for most flies it doesn't need to traverse the indirect blocks and
do multiple disk read/write.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* A directory. */
struct dir
  {
    struct inode *inode;                /* Backing store. */
    off_t pos;                          /* Current position. */
  };

/* A single directory entry. */
struct dir_entry
  {
    block_sector_t inode_sector;        /* Sector number of header. */
    char name[NAME_MAX + 1];            /* Null terminated file name. */
    bool in_use;                        /* In use or free? */
  };

struct thread {
  block_sector_t wd; // cwd inode
}

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

keep grabbing a chunk up until the next /, if there's more, try to open that dir and keep going, if there's not, return the last component as the basename

i just check if the first character is '/'

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

lock on inode editing for the directory inode, acquired at the start of reading/writing dir entries

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

no, we check open_cnt <= 1 in dir_remove before trying to remove the directory entry.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

we just stored the inode for the wd, it contains all the information we might need on disk. didn't really need to worry about whether the directory was open or not.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

this was the easiest so far but maybe just because i know how inside pintos works now? and also know how to use gdb? woohoo!

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?